#!/usr/bin/env python

import sys
from subprocess import check_output, CalledProcessError

PY2 = sys.version_info[0] == 2
PY3 = sys.version_info[0] == 3

if PY3:
    from urllib.parse import urlparse
elif PY2:
    from urlparse import urlparse

def pass_show(pass_name):
    cmd = ['pass', 'show', pass_name]
    output=check_output(cmd, shell=False, universal_newlines=True)
    if output:
        newline_pos = output.find('\n')
        output = output[0:newline_pos]
    return output

def credential_read(f):
    c = {}
    for line in f:
        line = line[0:-1]
        if not line.strip():
            break
        pair = line.split('=', 1)
        if len(pair) < 2:
            sys.stderr.write('invalid credential line: {0}\n'.format(line))
            sys.exit(-1)
        key, val = pair
        key_list = ['protocol', 'host', 'path', 'username', 'password']
        if key in key_list:
            c[key] = val
        elif key == 'quit':
            c[key] = bool(val)
        elif key in 'url':
            c = {}
            result = urlparse(val)
            for k in key_list:
                if k == 'host':
                    v = getattr(result, 'hostname', None)
                    p = getattr(result, 'port', None)
                    # `host` contains the `port` part.
                    #
                    # See `credential.c` in git source code.
                    if v and p:
                        v = '{0}:{1}'.format(v, p)
                else:
                    v = getattr(result, k, None)
                if v:
                    c[k] = v
    return c

def credential_write(f, c):
    for key in c:
        val = c[key]
        if key == 'quit':
            val = 1 if val else 0
        f.write('{0}={1}\n'.format(key, val))

def credential_fill(c):
    if not c.get('protocol') or not (c.get('host') or c.get('path')):
        return 1
    if not c.get('username'):
        accounts = pass_show('git/{host}/.accounts'.format(**c))
        if accounts:
            c['username'] = accounts
    password = pass_show('git/{host}/{username}/password'.format(**c))
    if password:
        c['password'] = password
    credential_write(sys.stdout, c)

def main():
    if len(sys.argv) < 2:
        sys.exit(0)
    if sys.argv[1] == 'get':
        try:
            c = credential_read(sys.stdin)
            ret = credential_fill(c)
            sys.exit(ret)
        except CalledProcessError as e:
            sys.exit(e.returncode)

if __name__ == '__main__':
    main()

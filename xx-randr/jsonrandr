#!/usr/bin/env python

from __future__ import unicode_literals

from functools import cmp_to_key
import json
import sys


def get_preferred(query):
    return query.get('preferred') or query['modes'][0]


def get_output_config(output, query, last_config):
    q = query[output]
    preferred = get_preferred(q)
    width = preferred['width']
    height = preferred['height']
    rate = preferred['rate']
    lvds1 = get_preferred(query['LVDS1'])
    virtual1 = get_preferred(query['VIRTUAL1'])
    if output == 'LVDS1':
        return {
            'x': 0,
            'y': 0,
            'width': width,
            'height': height,
            'rate': rate,
        }
    elif output == 'VIRTUAL1':
        return {
            'x': lvds1['width'],
            'y': lvds1['height'],
            'width': width,
            'height': height,
            'rate': rate,
        }


def get_config(query):
    config = {}

    def connected(output):
        return query[output]['connected']

    def index(output):
        return query[output]['index']

    def cmp(x, y):
        if connected(x) and not connected(y):
            return -1
        if not connected(x) and connected(y):
            return 1
        return index(x) - index(y)

    outputs = sorted(query.keys(), key=cmp_to_key(cmp))
    outputs = outputs + ['VIRTUAL1']
    last_config = None
    for output in outputs:
        if not connected(output):
            config[output] = None
            continue
        config[output] = get_output_config(output, query, last_config)
        last_config = config[output]
    return config


def main():
    query = json.load(sys.stdin)
    config = get_config(query)
    json.dump(config, sys.stdout)


if __name__ == '__main__':
    main()

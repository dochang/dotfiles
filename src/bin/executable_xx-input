#!/usr/bin/env python3

# TrackPoint
# http://www.thinkwiki.org/wiki/How_to_configure_the_TrackPoint
# http://okomestudio.net/biboroku/?p=1816
# https://wiki.debian.org/InstallingDebianOn/Thinkpad/Trackpoint
# xinput(1)
# evdev(4)
# libinput(4)
# https://en.wikipedia.org/wiki/Compose_key
# https://en.wikipedia.org/wiki/Inverted_question_and_exclamation_marks

from __future__ import absolute_import, division, print_function

__metaclass__ = type

import json
import os
import re
import subprocess
import sys

TRACKPOINT_NAME = "TPPS/2 IBM TrackPoint"
TOUCHPAD_NAME = "SynPS/2 Synaptics TouchPad"


def load_config():
    # https://stackoverflow.com/a/4028943
    home_dir = os.path.expanduser("~")
    default_xdg_config_dir = os.path.join(home_dir, ".config")
    xdg_config_dir = os.getenv("XDG_CONFIG_DIR", default_xdg_config_dir)
    conf_dir = os.path.join(xdg_config_dir, "xx-input")
    conf_file = os.path.join(conf_dir, "config.json")
    try:
        with open(conf_file) as f:
            config = json.load(f)
    except (IOError, json.JSONDecodeError):
        config = {}
    return config


class Runner:
    def __init__(self):
        pass

    def call(self, *args, **kwargs):
        return subprocess.call(*args, **kwargs)

    def check_output(self, *args, **kwargs):
        return subprocess.check_output(*args, **kwargs)


class Device:
    def __init__(self, name, dev_id, use, dev_type, attach_to):
        self.name = name
        self.dev_id = dev_id
        self.use = use
        self.dev_type = dev_type
        self.attach_to = attach_to

    def call(self, *args):
        return subprocess.call(*args)

    def disable(self, osmgr):
        osmgr.runner.call(["xinput", "--disable", str(self.dev_id)])

    def config(self, osmgr, config):
        raise RuntimeError("You are not supposed to be here")


class Keyboard(Device):
    def config(self, osmgr, config):
        if osmgr.vm:
            # When a new keyboard is plugged in, the keymap does not apply to
            # the new keyboard.  xmodmap is a workaround, however, this only
            # works if I type the command on the new keyboard.  The answer is
            # "using setxkbmap".
            #
            # https://bbs.archlinux.org/viewtopic.php?pid=1345868#p1345868
            #
            # Also, do not set the keyboard in VM.
            return
        keyboards = config.get("keyboards") or {}
        if self.name in keyboards:
            cmd = ["setxkbmap", "-device", str(self.dev_id)]
            opts = keyboards[self.name].get("options") or []
            if opts:
                for opt in opts:
                    cmd.append("-option")
                    cmd.append(opt)
                osmgr.runner.call(cmd)


class Pointer(Device):
    def config(self, osmgr, config):
        pointers = config.get("pointers") or {}
        if self.name in pointers:
            properties = pointers[self.name].get("properties") or []
            for prop in properties:
                cmd = ["xinput", "--set-prop", str(self.dev_id)]
                cmd.extend(prop)
                osmgr.runner.call(cmd)


class OSManager:
    def __init__(self, runner):
        self.runner = runner
        self.has_trackpoint = False
        self.touchpad_ids = []
        try:
            output = self.runner.check_output(
                ["hostnamectl"],
                stderr=subprocess.STDOUT,
                # Print error message on STDOUT instead of STDERR.
                universal_newlines=True,
            )
            self.vm = "Chassis: vm\n" in output
        except subprocess.CalledProcessError:
            self.vm = True
            # If `hostnamectl` returns non-zero, it means systemd is not
            # running, which means we're in a virtual environment, such as WSL.

    def get_devices(self):
        devices = {}

        self.has_trackpoint = False
        self.touchpad_ids = []
        pattern = re.compile(
            r"^[^A-Za-z0-9]*([^\t]+)\tid=(\d+)\t\[([^ ]+) +([^ ]+) +\((\d+)\)\]"
        )
        output = self.runner.check_output(
            ["xinput", "--list", "--short"], universal_newlines=True
        )
        for line in output.splitlines():
            m = re.match(pattern, line)
            if not m:
                continue
            name = m.group(1).strip()
            dev_id = int(m.group(2))
            use = m.group(3)
            dev_type = m.group(4)
            attach_to = int(m.group(5))
            init_args = {
                "name": name,
                "dev_id": dev_id,
                "use": use,
                "dev_type": dev_type,
                "attach_to": attach_to,
            }
            if dev_type == "keyboard":
                device = Keyboard(**init_args)
            elif dev_type == "pointer":
                device = Pointer(**init_args)
                if not self.has_trackpoint and device.name == TRACKPOINT_NAME:
                    self.has_trackpoint = True
                elif device.name == TOUCHPAD_NAME:
                    self.touchpad_ids.append(device.dev_id)
            else:
                m = "Unsupported device: {name} id={dev_id} type={dev_type}\n"
                sys.stderr.write(m.format(**init_args))
                continue
            devices[dev_id] = device
        return devices


def main():
    config = load_config()
    runner = Runner()
    osmgr = OSManager(runner)
    devices = osmgr.get_devices()
    for device in devices.values():
        device.config(osmgr, config)
    # Disable touchpad if trackpoint exists.
    if osmgr.has_trackpoint:
        for touchpad_id in osmgr.touchpad_ids:
            devices[touchpad_id].disable(osmgr)


if __name__ == "__main__":
    main()

#!/usr/bin/env python3

# This code is borrowed from: https://github.com/substack/xrandr-parse

from __future__ import unicode_literals

from subprocess import check_output
import re
import json


def parse(xrandr_state):

    connected_pattern = '^(\S+) connected (?:(\d+)x(\d+)\+(\d+)\+(\d+))?'
    disconnected_pattern = '^(\S+) disconnected'
    mode_pattern = '^\s+((\d+)x(\d+)(i?))\s+(\d+(?:\.\d+)?)([* ]?)([+ ]?)'

    regex = {
        'connected': re.compile(connected_pattern),
        'disconnected': re.compile(disconnected_pattern),
        'mode': re.compile(mode_pattern),
    }

    lines = xrandr_state.splitlines()
    query = {}
    output = None
    index = 0

    for line in lines:
        m = regex['connected'].search(line)
        if m:
            index += 1
            output = m.group(1)
            query[output] = {
                'connected': True,
                'modes': [],
                'index': index,
            }
            if all([m.group(i) for i in range(2, 6)]):
                query[output]['width'] = int(m.group(2))
                query[output]['height'] = int(m.group(3))
                query[output]['x'] = int(m.group(4))
                query[output]['y'] = int(m.group(5))
            continue
        m = regex['disconnected'].search(line)
        if m:
            index += 1
            output = m.group(1)
            query[output] = {
                'connected': False,
                'modes': [],
                'index': index,
            }
            continue
        m = regex['mode'].search(line)
        if output and m:
            r = {
                'name': m.group(1),
                'width': int(m.group(2)),
                'height': int(m.group(3)),
                'interlaced': m.group(4) == 'i',
                'rate': float(m.group(5)),
            }
            query[output]['modes'].append(r)
            if (m.group(6) == '*'):
                query[output]['current'] = r
            if (m.group(7) == '+'):
                query[output]['preferred'] = r
            continue
        output = None

    return query

xrandr_state = check_output(['xrandr'], universal_newlines=True)
obj = parse(xrandr_state)
print(json.dumps(obj))

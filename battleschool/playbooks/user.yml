---
- hosts: 'all'
  sudo: yes
  sudo_user: '{{ ansible_ssh_user }} -i'

  vars:
    pkg_state: present
    envs:
      pyenv:
        versions:
          - 2.7.10
          - 3.5.0
        packages:
          - pip
          # virtualenvwrapper depends on pbr.
          - pbr
          - virtualenv
          - virtualenvwrapper
          - httpie
          - thefuck
          - qrcode
        packages2:
          - 'https://github.com/dochang/battleschool/archive/next.zip#egg=battleschool'
          - ansible
          - ansible-lint
      rbenv:
        versions:
          - 2.2.3
        packages:
          - bundler
      ndenv:
        versions:
          - v5.1.0
          - v4.2.2              # LTS
          - v0.12.7             # Classic
        packages:
          - npm
          - nrm
          - metalsmith
          - yo
          - gulp
          - webpack
          - bower
          - nodemon
          - speed-test
          # For Emacs flycheck
          # https://github.com/zaach/jsonlint
          - jsonlint
      goenv:
        versions:
          - 1.5.1
        packages:
          - github.com/zimbatm/direnv
    env_versions:
      - name: pyenv
        versions: '{{ envs.pyenv.versions }}'
      - name: rbenv
        versions: '{{ envs.rbenv.versions }}'
      - name: ndenv
        versions: '{{ envs.ndenv.versions }}'
      - name: goenv
        versions: '{{ envs.goenv.versions }}'

  tasks:

    - name: Update Nix expressions
      shell: nix-channel --update
      args:
        chdir: '~'
      when: pkg_state == 'latest'
      tags:
        - nix

    - name: Install/Upgrade Nix packages
      nix_env:
        name: '{{ item }}'
        state: '{{ pkg_state }}'
      with_items:
        - nix
        # build helper
        - nix-prefetch-scripts
        - git-extras
        - git-remote-gcrypt
        - git-crypt
        - go1.5-syncthing-v0.11.25
        - progress
        - yank
        - editorconfig-core-c
        - jq
        - rustc
        - cargo
        - heroku
      tags:
        - nix

    - name: Install systemd config file for syncthing
      copy:
        src: files/etc/systemd/system/syncthing@.service
        dest: /etc/systemd/system/syncthing@.service
        owner: root
        group: root
        mode: 0644
      sudo: yes
      sudo_user: root
      tags:
        - syncthing

    - name: Configure systemd for syncthing
      shell: 'systemctl enable syncthing@{{ ansible_ssh_user }}.service'
      sudo: yes
      sudo_user: root
      tags:
        - syncthing

    - name: Install oh-my-zsh
      git:
        dest: ~/.oh-my-zsh
        repo: https://github.com/robbyrussell/oh-my-zsh.git

    - name: Install bash-it
      git:
        dest: ~/.bash_it
        repo: https://github.com/revans/bash-it.git

    - name: Install linuxbrew
      git:
        dest: ~/.linuxbrew
        repo: https://github.com/Homebrew/linuxbrew.git

    - name: Install anyenv
      git:
        dest: ~/.anyenv
        repo: https://github.com/dochang/anyenv.git
        remote: dochang
        version: next
      tags:
        - anyenv

    - name: Install anyenv-update
      git:
        dest: ~/.anyenv/plugins/anyenv-update
        repo: https://github.com/znz/anyenv-update.git
      tags:
        - anyenv

    - name: Install anyenv-git
      git:
        dest: ~/.anyenv/plugins/anyenv-git
        repo: https://github.com/znz/anyenv-git.git
      tags:
        - anyenv

    - name: Install anyenv-exec
      git:
        dest: ~/.anyenv/plugins/anyenv-exec
        repo: https://github.com/aereal/anyenv-exec.git
      tags:
        - anyenv

    - name: Install envs
      command: 'anyenv install {{ item.key }}'
      args:
        chdir: '~'
        creates: '~/.anyenv/envs/{{ item.key }}'
      with_dict: envs
      tags:
        - anyenv

    - name: Update anyenv
      command: 'anyenv update'
      args:
        chdir: '~'
      when: pkg_state == 'latest'
      tags:
        - anyenv

    - name: Install interpreters
      shell: '{{ item.0.name }} install {{ item.1 }}'
      args:
        chdir: '~'
        creates: '~/.anyenv/envs/{{ item.0.name }}/versions/{{ item.1 }}'
      with_subelements:
        - env_versions
        - versions
      tags:
        - anyenv

    - name: Rehash envs
      command: '{{ item.key }} rehash'
      args:
        chdir: '~'
      with_dict: envs
      tags:
        - anyenv

    - name: Set global version of interpreters
      command: '{{ item.key }} global {{ item.value.versions[0] }}'
      args:
        chdir: '~'
      with_dict: envs
      tags:
        - anyenv

    - name: Install utils
      pip:
        name: '{{ item.1 }}'
        state: '{{ pkg_state }}'
      environment:
        PYENV_VERSION: '{{ item.0 }}'
      notify:
        - pyenv rehash
      with_nested:
        - envs.pyenv.versions
        - envs.pyenv.packages
      tags:
        - pip

    # These utils currently supports Python 2 only.
    - name: Install Python 2 utils
      pip:
        name: '{{ item.1 }}'
        state: '{{ pkg_state }}'
      environment:
        PYENV_VERSION: '{{ item.0 }}'
      notify:
        - pyenv rehash
      when: item.0 | version_compare('3', '<')
      with_nested:
        - envs.pyenv.versions
        - envs.pyenv.packages2
      tags:
        - pip

    - name: Install utils
      gem:
        name: '{{ item.1 }}'
        state: '{{ pkg_state }}'
      environment:
        RBENV_VERSION: '{{ item.0 }}'
      notify:
        - rbenv rehash
      with_nested:
        - envs.rbenv.versions
        - envs.rbenv.packages
      tags:
        - gem

    - name: Install utils
      npm:
        name: '{{ item.1 }}'
        state: '{{ pkg_state }}'
        global: yes
      environment:
        NDENV_VERSION: '{{ item.0 }}'
      notify:
        - ndenv rehash
      with_nested:
        - envs.ndenv.versions
        - envs.ndenv.packages
      tags:
        - npm

    - name: Install utils
      command: 'go get {{ item.1 }}'
      environment:
        GOENV_VERSION: '{{ item.0 }}'
      notify:
        - goenv rehash
      with_nested:
        - envs.goenv.versions
        - envs.goenv.packages
      tags:
        - go

    - name: Deploy Emacs
      command: ~/bin/deploy-emacs.sh
      args:
        chdir: '~'
      tags:
        - emacs

  handlers:
    - name: pyenv rehash
      command: pyenv rehash
    - name: rbenv rehash
      command: rbenv rehash
    - name: ndenv rehash
      command: ndenv rehash
    - name: goenv rehash
      command: goenv rehash
